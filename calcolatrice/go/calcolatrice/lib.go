// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the schema definition file instead

//nolint:dupl
package calcolatrice

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"

var exportMap = wasmlib.ScExportMap{
	Names: []string{
		FuncAdd,
		FuncDivide,
		FuncInit,
		FuncMultiply,
		FuncSetOwner,
		FuncSubtract,
		ViewGetOwner,
		ViewGetRes,
	},
	Funcs: []wasmlib.ScFuncContextFunction{
		funcAddThunk,
		funcDivideThunk,
		funcInitThunk,
		funcMultiplyThunk,
		funcSetOwnerThunk,
		funcSubtractThunk,
	},
	Views: []wasmlib.ScViewContextFunction{
		viewGetOwnerThunk,
		viewGetResThunk,
	},
}

func OnLoad(index int32) {
	if index >= 0 {
		exportMap.Call(index)
		return
	}

	exportMap.Export()
}

type AddContext struct {
	Params  ImmutableAddParams
	State   MutablecalcolatriceState
}

func funcAddThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("calcolatrice.funcAdd")
	f := &AddContext{
		Params: ImmutableAddParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutablecalcolatriceState{
			proxy: wasmlib.NewStateProxy(),
		},
	}

	access := f.State.Owner()
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	ctx.Require(f.Params.Number1().Exists(), "missing mandatory number1")
	ctx.Require(f.Params.Number2().Exists(), "missing mandatory number2")
	funcAdd(ctx, f)
	ctx.Log("calcolatrice.funcAdd ok")
}

type DivideContext struct {
	Params  ImmutableDivideParams
	State   MutablecalcolatriceState
}

func funcDivideThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("calcolatrice.funcDivide")
	f := &DivideContext{
		Params: ImmutableDivideParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutablecalcolatriceState{
			proxy: wasmlib.NewStateProxy(),
		},
	}

	access := f.State.Owner()
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	ctx.Require(f.Params.Number1().Exists(), "missing mandatory number1")
	ctx.Require(f.Params.Number2().Exists(), "missing mandatory number2")
	funcDivide(ctx, f)
	ctx.Log("calcolatrice.funcDivide ok")
}

type InitContext struct {
	Params  ImmutableInitParams
	State   MutablecalcolatriceState
}

func funcInitThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("calcolatrice.funcInit")
	f := &InitContext{
		Params: ImmutableInitParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutablecalcolatriceState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	funcInit(ctx, f)
	ctx.Log("calcolatrice.funcInit ok")
}

type MultiplyContext struct {
	Params  ImmutableMultiplyParams
	State   MutablecalcolatriceState
}

func funcMultiplyThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("calcolatrice.funcMultiply")
	f := &MultiplyContext{
		Params: ImmutableMultiplyParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutablecalcolatriceState{
			proxy: wasmlib.NewStateProxy(),
		},
	}

	access := f.State.Owner()
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	ctx.Require(f.Params.Number1().Exists(), "missing mandatory number1")
	ctx.Require(f.Params.Number2().Exists(), "missing mandatory number2")
	funcMultiply(ctx, f)
	ctx.Log("calcolatrice.funcMultiply ok")
}

type SetOwnerContext struct {
	Params  ImmutableSetOwnerParams
	State   MutablecalcolatriceState
}

func funcSetOwnerThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("calcolatrice.funcSetOwner")
	f := &SetOwnerContext{
		Params: ImmutableSetOwnerParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutablecalcolatriceState{
			proxy: wasmlib.NewStateProxy(),
		},
	}

	// current owner of this smart contract
	access := f.State.Owner()
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	ctx.Require(f.Params.Owner().Exists(), "missing mandatory owner")
	funcSetOwner(ctx, f)
	ctx.Log("calcolatrice.funcSetOwner ok")
}

type SubtractContext struct {
	Params  ImmutableSubtractParams
	State   MutablecalcolatriceState
}

func funcSubtractThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("calcolatrice.funcSubtract")
	f := &SubtractContext{
		Params: ImmutableSubtractParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutablecalcolatriceState{
			proxy: wasmlib.NewStateProxy(),
		},
	}

	access := f.State.Owner()
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	ctx.Require(f.Params.Number1().Exists(), "missing mandatory number1")
	ctx.Require(f.Params.Number2().Exists(), "missing mandatory number2")
	funcSubtract(ctx, f)
	ctx.Log("calcolatrice.funcSubtract ok")
}

type GetOwnerContext struct {
	Results MutableGetOwnerResults
	State   ImmutablecalcolatriceState
}

func viewGetOwnerThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("calcolatrice.viewGetOwner")
	results := wasmlib.NewScDict()
	f := &GetOwnerContext{
		Results: MutableGetOwnerResults{
			proxy: results.AsProxy(),
		},
		State: ImmutablecalcolatriceState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	viewGetOwner(ctx, f)
	ctx.Results(results)
	ctx.Log("calcolatrice.viewGetOwner ok")
}

type GetResContext struct {
	Results MutableGetResResults
	State   ImmutablecalcolatriceState
}

func viewGetResThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("calcolatrice.viewGetRes")
	results := wasmlib.NewScDict()
	f := &GetResContext{
		Results: MutableGetResResults{
			proxy: results.AsProxy(),
		},
		State: ImmutablecalcolatriceState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	viewGetRes(ctx, f)
	ctx.Results(results)
	ctx.Log("calcolatrice.viewGetRes ok")
}
