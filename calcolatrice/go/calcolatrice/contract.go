// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the schema definition file instead

package calcolatrice

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"

type AddCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableAddParams
}

type DivideCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableDivideParams
}

type InitCall struct {
	Func    *wasmlib.ScInitFunc
	Params  MutableInitParams
}

type MultiplyCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableMultiplyParams
}

type SetOwnerCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableSetOwnerParams
}

type SubtractCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableSubtractParams
}

type GetOwnerCall struct {
	Func    *wasmlib.ScView
	Results ImmutableGetOwnerResults
}

type GetResCall struct {
	Func    *wasmlib.ScView
	Results ImmutableGetResResults
}

type Funcs struct{}

var ScFuncs Funcs

func (sc Funcs) Add(ctx wasmlib.ScFuncCallContext) *AddCall {
	f := &AddCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncAdd)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) Divide(ctx wasmlib.ScFuncCallContext) *DivideCall {
	f := &DivideCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncDivide)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) Init(ctx wasmlib.ScFuncCallContext) *InitCall {
	f := &InitCall{Func: wasmlib.NewScInitFunc(ctx, HScName, HFuncInit)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) Multiply(ctx wasmlib.ScFuncCallContext) *MultiplyCall {
	f := &MultiplyCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncMultiply)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) SetOwner(ctx wasmlib.ScFuncCallContext) *SetOwnerCall {
	f := &SetOwnerCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncSetOwner)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) Subtract(ctx wasmlib.ScFuncCallContext) *SubtractCall {
	f := &SubtractCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncSubtract)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) GetOwner(ctx wasmlib.ScViewCallContext) *GetOwnerCall {
	f := &GetOwnerCall{Func: wasmlib.NewScView(ctx, HScName, HViewGetOwner)}
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) GetRes(ctx wasmlib.ScViewCallContext) *GetResCall {
	f := &GetResCall{Func: wasmlib.NewScView(ctx, HScName, HViewGetRes)}
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}
